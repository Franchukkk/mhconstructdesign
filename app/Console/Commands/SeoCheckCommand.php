<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class SeoCheckCommand extends Command
{
    protected $signature = 'seo:check';
    protected $description = '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ canonical, 301-—Ä–µ–¥—ñ—Ä–µ–∫—Ç—ñ–≤ —ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ title';

    protected $urls = [
        'https://mhconstructdesign.com',
        'https://mhconstructdesign.com/',
        'https://mhconstructdesign.com/blog',
        'https://mhconstructdesign.com/portfolio',
        'https://mhconstructdesign.com/portfolio/good-hope-rd-coastal-craft',
        'https://mhconstructdesign.com/portfolio/hanover-shadow-light',
        'https://mhconstructdesign.com/contact-request',
    ];

    protected $titles = [];

    public function handle()
    {
        foreach ($this->urls as $url) {
            $this->info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: $url");

            try {
                $response = Http::withHeaders([
                    'User-Agent' => 'LaravelSEOChecker/1.0'
                ])->get($url);

                $status = $response->status();
                $finalUrl = $response->effectiveUri() ?? $url;

                if ($url !== (string)$finalUrl) {
                    $this->warn("‚Ü™Ô∏è –†–µ–¥—ñ—Ä–µ–∫—Ç: $url ‚Üí $finalUrl");
                } else {
                    $this->line("‚úÖ –ë–µ–∑ —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É");
                }

                if ($status !== 200) {
                    $this->error("‚ùå –°—Ç–∞—Ç—É—Å: $status");
                    continue;
                }

                $html = $response->body();

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ title
                if (preg_match('/<title>(.*?)<\/title>/si', $html, $matches)) {
                    $title = trim($matches[1]);
                    $this->line("üìÑ Title: $title");
                    if (in_array($title, $this->titles)) {
                        $this->warn("‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç title!");
                    } else {
                        $this->titles[] = $title;
                    }
                } else {
                    $this->error("‚ùå Title –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ canonical
                if (preg_match('/<link[^>]+rel=["\']canonical["\'][^>]+href=["\']([^"\']+)["\']/i', $html, $matches)) {
                    $canonical = $matches[1];
                    $this->line("üîó Canonical: $canonical");
                } else {
                    $this->warn("‚ùå Canonical –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
                }

            } catch (\Exception $e) {
                $this->error("–ü–æ–º–∏–ª–∫–∞: {$e->getMessage()}");
            }

            $this->line(str_repeat('-', 60));
        }

        $this->info("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }
}
